<!DOCTYPE html>
<html lang="en-GB">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link rel="shortcut icon" href="/images/favicon.ico" />

<title>ChinesePod | Lesson Assets Submission</title>

<link rel="stylesheet" href="/css/bootstrap.min.css">
<link data-n-head="ssr" rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900&amp;display=swap">
<link href="/css/font-awesome-5.css" rel="stylesheet" type="text/css">
<style type="text/css">
body {
  font-size: 16px;
  background: #f8f8f8; }

.btn-primary {
  background: #e1001e;
  color: #ffffff;
  border: 0; }
  .btn-primary:hover, .btn-primary:focus {
    background: #b11a1c;
    color: #ffffff;
    outline: 0;
    box-shadow: 0; }

.btn-primary:hover, .btn-primary:focus {
  background: #b11a1c;
  color: #ffffff;
  outline: 0;
  box-shadow: 0; }

.cp-header {
  background: #ffffff;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  z-index: 9999;
  margin: auto;
  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1);
  height: 80px; }
  .cp-header .container, .cp-header .row {
    height: 100%; }
  .cp-header .cp-logo img {
    width: 200px;
    height: auto; }

ul.cp-menu {
  -ms-flex-pack: end !important;
  justify-content: flex-end !important;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin: 0;
  padding: 0;
  -ms-flex-align: center !important;
  align-items: center !important; }

ul.cp-menu li {
  list-style: none;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  width: auto;
  padding: 0 10px; }

ul.cp-menu li a {
  position: relative;
  color: #ffffff;
  -webkit-transition: 0.2s all ease-in 0s;
  -moz-transition: 0.2s all ease-in 0s;
  -ms-transition: 0.2s all ease-in 0s;
  -o-transition: 0.2s all ease-in 0s;
  transition: 0.2s all ease-in 0s; }

ul.cp-menu li a:hover {
  text-decoration: none; }

ul.cp-menu li a.btn-primary {
  background: #e1001e;
  color: #ffffff;
  border: 0; }

ul.cp-menu li a.btn-primary:hover, ul.cp-menu li a.btn-primary:focus {
  background: #b11a1c;
  color: #ffffff; }

.cp-footer {
  background: #000000;
  color: #ffffff;
  height: 40px;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  z-index: 9999;
  margin: auto; }
  .cp-footer .container, .cp-footer .row {
    height: 100%; }

.cp-footer p {
  margin-bottom: 0; }

.cp-footer-nav {
  -ms-flex-pack: end !important;
  justify-content: flex-end !important;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap; }

.cp-footer-nav a {
  list-style: none;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  width: auto;
  color: #ffffff;
  display: inline-block;
  vertical-align: middle;
  margin-left: 20px;
  text-decoration: none; }
  .cp-footer-nav a:hover {
    text-decoration: underline; }

/* Initial form styling starts here */
.cp-fhead {
  margin-bottom: 40px; }
  .cp-fhead h1 {
    color: #ffffff;
    font-weight: bold;
    text-align: center; }
    .cp-fhead h1 .text-primary {
      color: #e1001e !important; }

.cp-section-fwrap {
  position: relative;
  margin-top: 80px;
  background: url(images/cp-bg.jpg) no-repeat 50% 50%/cover;
  padding: 40px 0;
  background-color: #e1001e !important;
  height: calc(100vh - 120px); }
  .cp-section-fwrap .container {
    height: 100%; }
    .cp-section-fwrap .container .row {
      height: 100%; }

.cp-pg-container {
  position: relative;
  min-height: 350px;
  padding-bottom: 30px;
  -webkit-box-shadow: 3px 3px 10px 0 rgba(0, 0, 0, 0.2);
  -moz-box-shadow: 3px 3px 10px 0 rgba(0, 0, 0, 0.2);
  -ms-box-shadow: 3px 3px 10px 0 rgba(0, 0, 0, 0.2);
  -o-box-shadow: 3px 3px 10px 0 rgba(0, 0, 0, 0.2);
  box-shadow: 3px 3px 10px 0 rgba(0, 0, 0, 0.2);
  background: #ffffff;
  padding: 30px;
  height: calc(100% - 40px);
  max-height: 710px;
  -webkit-border-radius: 25px;
  -moz-border-radius: 25px;
  -ms-border-radius: 25px;
  -o-border-radius: 25px;
  border-radius: 25px; }
  .cp-pg-container label {
    font-weight: bold !important; }
  .cp-pg-container .form-control {
    height: 50px;
    line-height: 30px;
    padding: 12px 20px 12px 20px;
    border-radius: 5px;
    box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.16);
    border: solid 2px #dfdfdf;
    background-color: #fcfcfc;
    color: #00000;
    -webkit-transition: 0.2s all ease-in 0s;
    -moz-transition: 0.2s all ease-in 0s;
    -ms-transition: 0.2s all ease-in 0s;
    -o-transition: 0.2s all ease-in 0s;
    transition: 0.2s all ease-in 0s; }
  .cp-pg-container .form-control:focus {
    background-color: #f2f2f2;
    -webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2), 1px 1px 1px rgba(0, 0, 0, 0.2) inset;
    -moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2), 1px 1px 1px rgba(0, 0, 0, 0.2) inset;
    -ms-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2), 1px 1px 1px rgba(0, 0, 0, 0.2) inset;
    -o-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2), 1px 1px 1px rgba(0, 0, 0, 0.2) inset;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2), 1px 1px 1px rgba(0, 0, 0, 0.2) inset; }
  .cp-pg-container textarea.form-control {
    height: auto; }
  .cp-pg-container input.less-num-field {
    text-align: center;
    font-weight: bold;
    border: 2px solid #000000;
    font-size: 20px;
    line-height: 24px; }
  .cp-pg-container .btn-less-num-field {
    width: 100%; }
  .cp-pg-container .text-primary {
    color: #e1001e !important; }

.cp-form-wrap {
  margin-bottom: 30px; }

.cp-compiler-wrap {
  position: relative;
  -webkit-box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  -moz-box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  -ms-box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  -o-box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.1);
  border: solid 1px #c4c4c4;
  background-color: #ffffff;
  padding: 20px 30px;
  -webkit-border-radius: 25px;
  -moz-border-radius: 25px;
  -ms-border-radius: 25px;
  -o-border-radius: 25px;
  border-radius: 25px;
  overflow: hidden;
  height: 300px;
  overflow: hidden; }
  .cp-compiler-wrap .cp-fth-cover {
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: #ffffff;
    width: 100%;
    height: 100%;
    z-index: 99;
    display: none; }
    .cp-compiler-wrap .cp-fth-cover .row {
      height: 100%; }
  .cp-compiler-wrap .cp-compiler-content {
    display: none; }
    .cp-compiler-wrap .cp-compiler-content .cp-cmp-head {
      margin-bottom: 15px; }
      .cp-compiler-wrap .cp-compiler-content .cp-cmp-head .cp-cmp-head-title {
        margin: auto;
        position: relative;
        display: inline-block;
        font-size: 30px;
        font-weight: bold; }
        .cp-compiler-wrap .cp-compiler-content .cp-cmp-head .cp-cmp-head-title:after {
          content: "";
          display: inline-block;
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          width: 100%;
          height: 2px;
          background: #000000; }
    .cp-compiler-wrap .cp-compiler-content .cp-cmp-body ul.cmp-list {
      margin: 0;
      padding: 0;
      display: block; }
      .cp-compiler-wrap .cp-compiler-content .cp-cmp-body ul.cmp-list li {
        list-style: none; }
        .cp-compiler-wrap .cp-compiler-content .cp-cmp-body ul.cmp-list li > ul {
          margin: 0;
          padding: 0 0 0 40px; }
  .cp-compiler-wrap.cp-fth-loader-active .cp-fth-cover {
    display: block; }
  .cp-compiler-wrap.cp-fth-loader-active .cp-compiler-content {
    display: none; }
  .cp-compiler-wrap.cp-fth-content-active {
    overflow-x: hidden;
    overflow-y: scroll; }
    .cp-compiler-wrap.cp-fth-content-active .cp-fth-cover {
      display: none; }
    .cp-compiler-wrap.cp-fth-content-active .cp-compiler-content {
      display: block; }

.cp-drag-assets {
  position: relative;
  margin-top: 30px;
  display: none; }
  .cp-drag-assets input[type="file"] {
    display: none;}
  .cp-drag-assets svg path {
    fill: #e1001e; }
  .cp-drag-assets .box {
    font-size: 1.25rem;
    /* 20 */
    background-color: #ffffff;
    position: relative;
    padding: 30px 20px;
    border-radius: 25px;
    text-align: center; }
  .cp-drag-assets .box.has-advanced-upload {
    border: 2px dashed #dddddd;
    -webkit-transition: outline-offset .15s ease-in-out, background-color .15s linear;
    transition: outline-offset .15s ease-in-out, background-color .15s linear;
    border-radius: 25px; }
  .cp-drag-assets .box.is-dragover {
    outline-offset: -20px;
    outline-color: #e1001e;
    background-color: #fff; }
  .cp-drag-assets .box__dragndrop,
  .cp-drag-assets .box__icon {
    display: none; }
  .cp-drag-assets .box.has-advanced-upload .box__dragndrop {
    display: inline; }
  .cp-drag-assets .box.has-advanced-upload .box__icon {
    width: 100%;
    height: 80px;
    fill: #92b0b3;
    display: block;
    margin-bottom: 40px; }
  .cp-drag-assets .box.is-uploading .box__input,
  .cp-drag-assets .box.is-success .box__input,
  .cp-drag-assets .box.is-error .box__input {
    visibility: hidden; }
  .cp-drag-assets .box__uploading,
  .cp-drag-assets .box__success,
  .cp-drag-assets .box__error {
    display: none; }
  .cp-drag-assets .box.is-uploading .box__uploading,
  .cp-drag-assets .box.is-success .box__success,
  .cp-drag-assets .box.is-error .box__error {
    display: block;
    position: absolute;
    top: 50%;
    right: 0;
    left: 0;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%); }
  .cp-drag-assets .box__uploading {
    font-style: italic; }
  .cp-drag-assets .box__success {
    -webkit-animation: appear-from-inside .25s ease-in-out;
    animation: appear-from-inside .25s ease-in-out; }
@-webkit-keyframes appear-from-inside {
  from {
    -webkit-transform: translateY(-50%) scale(0); }
  75% {
    -webkit-transform: translateY(-50%) scale(1.1); }
  to {
    -webkit-transform: translateY(-50%) scale(1); } }
@keyframes appear-from-inside {
  from {
    transform: translateY(-50%) scale(0); }
  75% {
    transform: translateY(-50%) scale(1.1); }
  to {
    transform: translateY(-50%) scale(1); } }
  .cp-drag-assets .box__restart {
    font-weight: 700; }
  .cp-drag-assets .box__restart:focus,
  .cp-drag-assets .box__restart:hover {
    color: #000000; }
  .cp-drag-assets .js .box__file {
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1; }
  .cp-drag-assets .js .box__file + label {
    max-width: 80%;
    text-overflow: ellipsis;
    white-space: nowrap;
    cursor: pointer;
    display: inline-block;
    overflow: hidden; }
  .cp-drag-assets .js .box__file + label:hover strong,
  .cp-drag-assets .box__file:focus + label strong,
  .cp-drag-assets .box__file.has-focus + label strong {
    color: #000000; }
  .cp-drag-assets .js .box__file:focus + label,
  .cp-drag-assets .js .box__file.has-focus + label {
    outline: 1px dotted #000;
    outline: -webkit-focus-ring-color auto 5px; }
  .cp-drag-assets .js .box__file + label * {
    /* pointer-events: none; */
    /* in case of FastClick lib use */ }
  .cp-drag-assets .no-js .box__file + label {
    display: none; }
  .cp-drag-assets .no-js .box__button {
    display: block; }
  .cp-drag-assets .box__button {
    font-weight: 700;
    color: #e5edf1;
    background-color: #ffffff;
    display: none;
    padding: 2px 16px;
    float: right; 
    margin-right: 10px;
    z-index: 99;
    position: relative;
  }
  .cp-drag-assets .box__button:hover,
  .cp-drag-assets .box__button:focus {
    background-color: #0f3c4b; }
  .cp-drag-assets.active {
    display: block; }
  .cp-drag-assets .button_finish {
    display: block;
  }
@media only screen and (max-width: 1023px) and (min-width: 768px) {
  .cp-fhead h1 {
    font-size: 30px; } }
@media only screen and (max-width: 767px) and (min-width: 568px) {
  .cp-fhead h1 {
    font-size: 26px; } }
@media only screen and (max-width: 567px) and (min-width: 320px) {
  h3 {
    font-size: 18px; }

  .cp-logo img {
    width: 150px !important;
    height: auto; }

  .cp-fhead h1 {
    font-size: 22px; }

  .cp-copyright p, .cp-footer-nav a {
    white-space: nowrap;
    font-size: 15px; }

  .cp-section-fwrap {
    height: 100%;
    background-repeat: repeat-y !important; }

  .cp-pg-container {
    height: auto;
    max-height: none;
    margin-bottom: 20px;
    padding: 20px; }
    .cp-pg-container label {
      margin-bottom: 10px;
      text-align: center !important;
      display: block; }

  .cp-compiler-wrap {
    padding: 20px; }
    .cp-compiler-wrap .cp-cmp-head-title {
      font-size: 22px !important; } }


  .box_upload_file_list {
    display: block;
    position: absolute;
    top: 10px;
    right: 5%;
    background-color: white;
    width: 90%;
    display: none;
    z-index: 99;
  }

  .box_upload_file_list ul {
    margin: 0px;
    padding: 0px;
  }

  #file_list{
      width: 100%;
      display: flex;
      margin: 0px auto;
      flex-direction: column;
      align-items: center;
      height: 170px;
      overflow: auto;
  }

  #file_list li{
      width: 100%;
      height: 70px;
      border: 1px solid black;
      box-sizing: border-box;
      position: relative;
      display: flex;
      align-items: center;
  }

  .file_avatar{
      width: 60px;
      height: 60px;
      margin: 0 5px;
  }

  .file_info{
      flex: 2;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      text-align: left;
  }

  .file_name{
      font-weight: bold;
  }

  .file_size{
      font-size: 14px;
  }

  .bar{
      height: 5px;
      background-color: blue;
      position: relative;
  }

  .process_box{
      display: flex;
      align-items: center;
  }

  .process_bar{
      width: 90%;
      height: 5px;
      line-height: 15px;
      background-color: white;
  }

  .process_size{
      position: absolute;
      right: 0;
      top: -15px;
      z-index: 1;
      font-size: 12px;
  }

  .upload_status{
      line-height: normal;
      padding-left: 5px;
  }

  .file_remove_btn{
      position: absolute;
      z-index: 1;
      right: 1%;
      top: 1%;
      cursor: pointer;
  }
</style>
</head>
<body>
    <header class="cp-header">
        <div class="container">
            <div class="row align-items-center justify-content-between">
                <div class="col-sm-3 col-6">
                    <div class="cp-logo">
                        <a href="#" title="Chinesepod"><img title="Chinesepod" width="200" height="80" src="/images/chinesepod-logo.svg" align="Chinesepod Logo" /></a>
                    </div>
                </div>
                <div class="col-sm-9 col-6">
                    <nav class="cp-nav text">
                        <ul class="cp-menu">
                            <li><a class="btn btn-primary" href="#">Dashboard</a></li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </header>

    <section class="cp-section-fwrap">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="cp-fhead">
                        <h1>Submit Assets for a Lesson</h1>
                    </div>
                    <div class="cp-pg-container">
                        <!-- Lesson Number Form -->
                        <div class="cp-form-wrap">
                            <form class="cp-fetch-lesson" id="FetchLessonForm" name="fetchLessonForm" action="#" method="get">
                                <div class="row">
                                    <div class="col-lg-6 col-md-10 col-sm-12">
                                        <div class="form-group">
                                            <div class="row align-items-center">
                                                <div class="col-sm-4 col-12">
                                                    <label for="LessonNumber">Enter Lesson Number</label>
                                                </div>
                                                <div class="col-sm-4 col-6">
                                                    <input type="text" name="lessonNumber" id="LessonNumber" placeholder="4212" class="form-control less-num-field" required="required">
                        </div>
                        <div class="col-sm-4 col-6">
                          <input type="button" name="fetchLessonFormSubmit" id="FetchLessonFormSubmit" value="Submit" class="btn-less-num-field btn btn-lg btn-primary" onclick="ValidateLessonNumberAndShowSummary(document.fetchLessonForm.lessonNumber)">
                        </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div> <!-- end of lesson number form -->
                        <!-- Lesson result Wrap-->
                        <div class="cp-compiler-wrap">
                            <!-- Loading Lesson Result cover -->
                            <div class="cp-fth-cover">
                                <div class="row align-items-center">
                                    <div class="col-12 text-center">
                                        <div class="cp-fth">
                                            <div class="spinner-border" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <h3 class="cp-fth-title">Connecting to Server...</h3>
                                        </div>
                                    </div>
                                </div>
                            </div> <!-- end of loading lesson result cover -->
                            <!-- Compiler Result -->
                            <div class="cp-compiler-content">
                                <div class="cp-cmp-head">
                                    <h1 class="cp-cmp-head-title">Results for <span class="text-primary" id="LessonIdNumber">4212:</span></h1>
                                </div>
                                <div class="cp-cmp-body">
                                    <ul class="cmp-list">
                                        
                                    </ul>
                                </div>
                            </div> <!-- end of compiler result -->
                        </div> <!-- end of lesson result Wrap -->
                        <!-- Drag Assets -->
                        <div class="cp-drag-assets">
                            <form method="post" action="#" enctype="multipart/form-data" novalidate class="box">
                                <div class="box__input">
                                    <svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>
                                    <input type="file" name="files[]" id="file" class="box__file" data-multiple-caption="{count} files selected" multiple />
                                    <strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.
                                </div>
                <div class="box_upload_file_list">
                    <ul id="file_list">

                    </ul>
                </div>
                <div>
                  <button type='button' class="box__button button_finish" onclick="checkFilesAfterSelect()">Finish</button>
                  <button type='button' class="box__button button_cancel" onclick="cancelUploadAndInitData()">Cancel</button>
                  <button type='button' class="box__button button_upload" onclick="uploadAssets()">Upload</button>
                </div>
                            </form>
                        </div> <!-- end of drag assets -->
                    </div> <!-- end of cp-pg-container -->
                </div>
            </div>
        </div>
    </section>

    <footer class="cp-footer">
        <div class="container">
            <div class="row align-items-center justify-content-between">
                <div class="col-lg-4 col-sm-6 col-5">
                    <div class="cp-copyright">
                        <p>© 2020 ChinesePod LLC</p>
                    </div>
                </div>
                <div class="col-lg-4 col-sm-6 col-7">
                    <div class="cp-footer-nav">
                        <a href="/privacy" class="footer-nav-link">Privacy</a>
                        <a href="/terms" class="footer-nav-link">Terms</a>
                    </div>
                </div>
            </div>
        </div>
    </footer>


<script src="/js/jquery-3.5.1.slim.min.js"></script>
<script src="/js/bootstrap.min.js"></script>
<script type="text/javascript">

  //api list
  const UPLOAD_SERVER_API = 'your server api path';
  const GET_FTP_FILE_NAMES_API = 'your server api path';

  //check file name
  const CHECK_FILE_SUCCESS_CODE = 0;
  const CHECK_FILE_INVALID_LESSON_NUMBER_CODE = 1;
  const CHECK_FILE_INVALID_EXTENSION_CODE = 2;
  const CHECK_FILE_INVALID_NAME_CODE = 3;
  //file type
  const FILE_TYPE_OTHER = 0;
  const FILE_TYPE_AUDIO = 1;
  const FILE_TYPE_SLIDE = 2;
  //check status
  const CHECK_STATUS_SUCCESS = 1;
  const CHECK_STATUS_FAIL = 0;

  const BATCH_UPLOAD_COUNT_LIMIT = 5;

  //describe file upload status
  const UPLOAD_STATUS_PENDING = 0;
  const UPLOAD_STATUS_UPLOADING = 1;
  const UPLOAD_STATUS_SUCCESS = 2;
  const UPLOAD_STATUS_FAIL = 3;

  const SLIDES_TYPE = ['sp', 'tp', 'sl', 'tl'];
  const IMAGE_FILE_TYPE_ARRAY = ['jpg'];
  const AUDIO_FILE_TYPE_ARRAY = ['mp3', 'wav'];

  var jq = jQuery.noConflict();
  var selectedFiles = [],
      hasUploadFileIndexs = [],
      nextFileIndex = 0;

  var checkResult = initCheckResult();
  var audioSlidesMap = initAudioSlidesMap();

  function ValidateLessonNumberAndShowSummary(inputText){

    validResult = ValidateLessonNumber(inputText.value);
    if (!validResult) {
      return;
    }
    jq('#LessonIdNumber').html(inputText.value);
    jq(inputText).prop('disabled', true); 

    showLoadStyleAndCheckResult();
    cancelUploadAndInitData();
  }

  function showLoadStyleAndCheckResult(selectedFileNames = []) {
    jq('.cp-compiler-wrap').removeClass('cp-fth-content-active');
    jq('.cp-compiler-wrap').addClass('cp-fth-loader-active');

    jq.when(getUploadedFileNames()).done(function(uploaded_file_names){  
      jq('.cp-compiler-wrap').removeClass('cp-fth-loader-active');
      jq('.cp-compiler-wrap').addClass('cp-fth-content-active');
      needCheckFileNames = combineArrayToBeUnique(selectedFileNames, uploaded_file_names);
      if (getObjectOrArrayLength(needCheckFileNames) == 0) {    
        jq('.cp-compiler-wrap').hide();
      } else {
        checkFilesAndShowSummary(needCheckFileNames);
        document.querySelectorAll( '.box' )[0].classList.add( 'has-advanced-upload' );
      }
      jq('.cp-drag-assets').addClass('active');
      showButtonByCheckStatus(checkResult.status);
    });
  }

  function ValidateLessonNumber (lessonNumber) {
    var reg = /^([0-9]{4}|[A-Z]{2}[0-9]{4})$/;
    if(!reg.test(lessonNumber)){   
      alert('please input valid lesson number');
      jq('.cp-fth-cover .spinner-border').removeClass('text-success');
      jq('.cp-fth-cover .cp-fth-title').html('Connecting to Server...');
      jq('.cp-compiler-wrap').removeClass('cp-fth-loader-active');
      jq('.cp-compiler-wrap').removeClass('cp-fth-content-active');
      jq('.cp-drag-assets').removeClass('active');
      return false;
    }
    return true
  }

  'use strict';

  ( function ( document, window, index )
  {
    // feature detection for drag&drop upload
    var isAdvancedUpload = function() {
      var div = document.createElement( 'div' );
      return ( ( 'draggable' in div ) || ( 'ondragstart' in div && 'ondrop' in div ) ) && 'FormData' in window && 'FileReader' in window;
    }();


    // applying the effect for every form
    var forms = document.querySelectorAll( '.box' );
    Array.prototype.forEach.call( forms, function( form )
    {
      var input = form.querySelector( 'input[type="file"]' );

      // letting the server side to know we are going to make an Ajax request
      var ajaxFlag = document.createElement( 'input' );
      ajaxFlag.setAttribute( 'type', 'hidden' );
      ajaxFlag.setAttribute( 'name', 'ajax' );
      ajaxFlag.setAttribute( 'value', 1 );
      form.appendChild( ajaxFlag );

      // automatically submit the form on file select
      input.addEventListener( 'change', function( e )
      {
          addAndShowFiles( e.target.files );
      });

      // drag&drop files if the feature is available
      if( isAdvancedUpload )
      {
        form.classList.add( 'has-advanced-upload' ); // letting the CSS part to know drag&drop is supported by the browser

        [ 'drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop' ].forEach( function( event )
        {
            form.addEventListener( event, function( e )
            {
                // preventing the unwanted behaviours
                e.preventDefault();
                e.stopPropagation();
            });
        });
        [ 'dragover', 'dragenter' ].forEach( function( event )
        {
            form.addEventListener( event, function()
            {
                form.classList.add( 'is-dragover' );
            });
        });
        [ 'dragleave', 'dragend', 'drop' ].forEach( function( event )
        {
            form.addEventListener( event, function()
            {
                form.classList.remove( 'is-dragover' );
            });
        });
        form.addEventListener( 'drop', function( e )
        { // the files that were dropped
            addAndShowFiles( e.dataTransfer.files );
        });

        form.addEventListener( 'click', function( e )
        { 
          var _con = jq('.file_remove_btn');
          if(!_con.is(e.target) && _con.has(e.target).length === 0){
            input.click();
          }  
        });
      }
      // Firefox focus bug fix for file input
      input.addEventListener( 'focus', function(){ input.classList.add( 'has-focus' ); });
      input.addEventListener( 'blur', function(){ input.classList.remove( 'has-focus' ); });

    });
  }( document, window, 0 ));
  
  function addAndShowFiles(files){
    showWaitCheckProgressButtons();
    var newFiles = addFiles(files);
    showFileListByNeedUploadFiles(newFiles);
  }

  function addFiles(files) {
    var newFiles = [];
    for(var i = 0; i < files.length; i++){
      if(checkFileIsExists(files[i].name)){
        continue;
      }
      selectedFiles[nextFileIndex] = files[i];
      newFiles[nextFileIndex] = files[i];
      nextFileIndex++;
    }
    return newFiles;
  }

  function checkFileIsExists(fileName) {
    for(index in selectedFiles) {
      if (selectedFiles[index].name === fileName) {
        return true;
      }
    }
    return false;
  }

  //show file list
  function showFileListByNeedUploadFiles(files) {
    jq('.box_upload_file_list').show();
    var html = document.getElementById('file_list').innerHTML;
    for (index in files) {
      file = files[index];
      html += '<li id="file_list_' + index + '">' +
                '<img src="/file.png" class="file_avatar">' +
                '<div class="file_info">' +
                    '<div>' +
                        '<div class="file_name">' + file.name + '</div>' +
                        '<div class="file_size">' + transferSizeUnit(file.size) + '</div>' +
                    '</div>' +
                    '<div class="process_box">' +
                        '<div class="process_bar">' +
                            '<div class="bar" style="width:0%">' +
                                '<div class="process_size" style="display: none">0%</div>' +
                            '</div>' +
                        '</div>' + 
                        '<div class="upload_status" style="color:gray">pending</div>' +
                    '</div>' +
                    '<div class="file_remove_btn" onClick="removeFile(' + index + ')">X</div>' +
                  '</div>' +
              '</li>';
    }
    document.getElementById('file_list').innerHTML = html;
  }

  function transferSizeUnit(size){
    var length = size.toString().length;
    if (length <= 3) {
      return size + "B"
    } else if (length > 3 && length <= 6) {
      return (size / 1024).toFixed(2) + "K"
    } else if (length > 6 && length <= 9) {
      return (size / 1024 / 1024).toFixed(2) + "M"
    } else {
      return (size / 1024 / 1024 / 1024).toFixed(2) + "G"
    }
  }

  //remove file
  function removeFile(index){
    stopBubbling();

    document.getElementById('file_list_' + index).remove();
    delete selectedFiles[index];
    if (getObjectOrArrayLength(selectedFiles) == 0) {
      jq('.box_upload_file_list').hide();
    } 
  }

  //when click finish,then check the files
  function checkFilesAfterSelect() {
    stopBubbling();
    jq('.cp-compiler-wrap').show();
    if (getObjectOrArrayLength(selectedFiles) == 0) {
      alert('please select files first');
      return false;
    }
    showLoadStyleAndCheckResult(getNeedUploadFileNames());
  }

  //show button after check files
  function showButtonByCheckStatus(checkStatus) {
    if (getObjectOrArrayLength(selectedFiles) == 0) {
      return;
    }
    if (checkStatus == CHECK_STATUS_SUCCESS) {
      showCheckSuccessButtons();
    } else {
      showCheckFailButtons();
    }
  }

  //upload files
  function uploadAssets() {
    stopBubbling();

    jq('.file_remove_btn').hide();
    jq('.button_cancel').hide();

    keys = Object.keys(selectedFiles);
    for (keyIndex = 0; keyIndex < Math.min(BATCH_UPLOAD_COUNT_LIMIT, keys.length); keyIndex++) {
      key = keys[keyIndex];
      uploadSingleFile(selectedFiles[key], keyIndex, keys);
    }
  }

  //upload file
  function uploadSingleFile(file, keyIndex, keys) {
    var currentFileIndex = keys[keyIndex];
    isUpload = checkIsUploadByIndex(currentFileIndex);
    if (isUpload) {
      uploadSingleFileByKeyIndex(keyIndex + BATCH_UPLOAD_COUNT_LIMIT, keys);
    } else {
      var formData = new FormData();
      formData.append('files', file);
      formData.append('ajax', 1);
      showFileUploadStatus(currentFileIndex, UPLOAD_STATUS_UPLOADING);

      var ajax = new XMLHttpRequest();
      ajax.open('post', UPLOAD_SERVER_API, true);
      ajax.onload = function(){
        if(ajax.status >= 200 && ajax.status < 400) {
          var data = JSON.parse( ajax.responseText );
          if (data.success) {
            hasUploadFileIndexs.push(currentFileIndex);
            showFileUploadStatus(currentFileIndex, UPLOAD_STATUS_SUCCESS);
          } else {
            showFileUploadStatus(currentFileIndex, UPLOAD_STATUS_FAIL);
          }
        } else {
          showFileUploadStatus(currentFileIndex, UPLOAD_STATUS_FAIL);
        }   
      };
      ajax.onerror = function(){
        showFileUploadStatus(currentFileIndex, UPLOAD_STATUS_FAIL);
      };
      ajax.upload.onprogress = function(e) {
        if (e.lengthComputable) {
            var progress = (e.loaded / e.total).toFixed(2) * 100 + '%';
            jq('#file_list_' + currentFileIndex).find('.bar').css('width', progress);
            jq('#file_list_' + currentFileIndex).find('.process_size').text(progress).show();
        }
      };
      ajax.onloadend = function() {
        uploadSingleFileByKeyIndex(keyIndex + BATCH_UPLOAD_COUNT_LIMIT, keys);
      }
      ajax.send(formData);
    }
  }

  function checkIsUploadByIndex(currentFileIndex) {
    return jq.inArray(currentFileIndex, hasUploadFileIndexs) != -1 ? true : false;
  }

  function uploadSingleFileByKeyIndex(keyIndex, keys) {
    currentFileIndex = keys[keyIndex];
    if (selectedFiles.hasOwnProperty(currentFileIndex)) {
      uploadSingleFile(selectedFiles[currentFileIndex], keyIndex, keys);
    }
  }

  function showFileUploadStatus(index, status) {
    if (status == UPLOAD_STATUS_SUCCESS) {
      jq('#file_list_' + index).find('.upload_status').text('success').css('color', 'green');
    } else if(status == UPLOAD_STATUS_UPLOADING) {
      jq('#file_list_' + index).find('.upload_status').text('uploading').css('color','blue');
    } else if(status == UPLOAD_STATUS_PENDING){
      jq('#file_list_' + index).find('.upload_status').text('pending').css('color','gray');
    } else {
      jq('#file_list_' + index).find('.upload_status').text('fail').css('color','red');
    }
  }

  function cancelUploadAndInitData() {
    stopBubbling();
    
    selectedFiles = [];
    hasUploadFileIndexs = [];
    nextFileIndex = 0;
    showWaitCheckProgressButtons();
    jq('.box_upload_file_list').hide();
  }

  function showWaitCheckProgressButtons() {
    jq('.button_finish').show();
    jq('.button_upload').hide();
    jq('.button_cancel').hide();
  }

  function showCheckFailButtons() {
    jq('.button_finish').hide();
    jq('.button_upload').show();
    jq('.button_cancel').show();
  }

  function showCheckSuccessButtons() {
    jq('.button_finish').hide();
    jq('.button_upload').show();
    jq('.button_cancel').hide();
  }

  function getObjectOrArrayLength(data) {
    return Object.keys(data).length;
  }

  function stopBubbling() {
    e = window.event;
    if (e.stopPropagation) {
        e.stopPropagation();
    } else {
        e.cancelBubble = true; //for ie
    }
  }

  function formatTimeUnit(time) {
    var unit = '';
    if (time == 9) {
      return '90s';
    } else if (time == 1) {
      unit = ' min';
    } else {
      unit = ' mins';
    }
    return time + unit;
  }

  function getUploadedFileNames() {
    var defer = jq.Deferred();
    var ajax = new XMLHttpRequest();
    var formData = new FormData();
    formData.append('lesson_number', getLessonNumber());
    formData.append('ajax', 1);

    var uploadedFileNames = [];
    ajax.open('post', GET_FTP_FILE_NAMES_API, true);
    ajax.onload = function(){
      var data = JSON.parse( ajax.responseText );
      if (data.success) {
          uploadedFileNames = data.uploaded_file_names;
      }
      defer.resolve(uploadedFileNames);
    };
    ajax.onerror = function(){
      alter('Network Error');
    };
    ajax.send(formData);

    return defer.promise();
  }

  function getNeedUploadFileNames() {
    var needUploadFileNames = [];
    for(index in selectedFiles) {
      needUploadFileNames.push(selectedFiles[index].name);
    }
    return needUploadFileNames;
  }

  function combineArrayToBeUnique(array1, array2) {
    var maxArray = [],
        minArray = [];
    if (getObjectOrArrayLength(array1) > getObjectOrArrayLength(array2)) {
      maxArray = array1;
      minArray = array2;
    } else {
      maxArray = array2;
      minArray = array1;
    }
    for (var i = 0; i < minArray.length; i++) {
      if (jq.inArray(minArray[i], maxArray) != -1) {
        continue;
      }
      maxArray.push(minArray[i]);
    }
    return maxArray;
  }

  function checkFilesAndShowSummary(fileNames) {
    getAudioSlidesMap(fileNames);
    getCheckResult();
    showSummary();
  }

  function getAudioSlidesMap(fileNames) {
    initCheckResult();
    validFileNames = filterFileName(fileNames);
    return groupFiles(validFileNames)
  }

  function getCheckResult() {
    checkResult.summary.backgroundSlides = audioSlidesMap.backgroundSlides.slice();
    var reg = /^[0-9]{1}$/;
    for (var index in audioSlidesMap) {
      if (reg.test(index)) {
        checkSingleAudioSlide(index, audioSlidesMap[index]);
      }  
    }
  }

  function checkSingleAudioSlide(time, data) {
    if (getObjectOrArrayLength(data.audio) == 0) {
      for(var imgOrder in data.slides) {
        checkResult.summary.no_match_audio_slides = combineArrayToBeUnique(checkResult.summary.no_match_audio_slides, data.slides[imgOrder]);
      }
      checkResult.status = CHECK_STATUS_FAIL;
    } else {
      if (!checkResult.summary.audioSlidesResult.hasOwnProperty(time)) {
        checkResult.summary.audioSlidesResult[time] = initAudioSlideResult();
      }
      for(var imgOrder in data.slides) {
        currentSlideTypes = getSlidesType(data.slides[imgOrder]);
        for(var i = 0; i < getObjectOrArrayLength(SLIDES_TYPE); i++) {
          if (jq.inArray(SLIDES_TYPE[i], currentSlideTypes) == -1) {
            checkResult.status = CHECK_STATUS_FAIL;
            checkResult.summary.audioSlidesResult[time].status = CHECK_STATUS_FAIL;
            checkResult.summary.audioSlidesResult[time].error_msg.push(getConsistencyCheckError(time, imgOrder, SLIDES_TYPE[i]));
          } else {
            if (jq.inArray(SLIDES_TYPE[i], ['sp', 'tp']) != -1) {
              checkResult.summary.audioSlidesResult[time].count.portrait++;
            } else {
              checkResult.summary.audioSlidesResult[time].count.landscape++;
            }
          }
        }
      }
    }
  }

  function getSlidesType(slides) {
    var slideType = [];
    for(var index in slides) {
      splitResult = slides[index].split('.');
      if (jq.inArray(splitResult[3].toLowerCase(), SLIDES_TYPE) != -1) {
        slideType.push(splitResult[3].toLowerCase());
      }
    }
    return slideType;
  }

  function getConsistencyCheckError(time, imgOrder, slideType) {
    return getLessonNumber() + '.' + time + '.' + imgOrder + ' ' + slideType + ' is missing!';
  }

  function showSummary(summary) {
    jq('.cp-compiler-wrap').show();
    var audioSlidesResult = checkResult.summary.audioSlidesResult;
    var html = '';
    
    if (getObjectOrArrayLength(checkResult.summary.backgroundSlides) != 0) {
      html += getBackgroundSlidesHtml(checkResult.summary.backgroundSlides);
    }

    var times = Object.keys(audioSlidesResult);
    if (getObjectOrArrayLength(times) != 0) {
      html += getPresentAudioDescHtml(times);
    }
    
    for(time in audioSlidesResult) {
      html += getAudioSlidesSummaryHtml(time, audioSlidesResult[time]);
    }

    if (getObjectOrArrayLength(checkResult.summary.no_match_audio_slides) != 0) {
      html += getNoMatchAudioFilesHtml(checkResult.summary.no_match_audio_slides);
    }

    if (getObjectOrArrayLength(checkResult.summary.wrong_files) != 0) {
      html += getWrongFilesHtml(checkResult.summary.wrong_files);
    }

    html += getEndDescHtml(checkResult.status);
    document.getElementsByClassName('cmp-list')[0].innerHTML = html;
  }

  function getPresentAudioDescHtml(times) {
    var html = '<li>Audio files present for ';
    for(var i = 0; i < getObjectOrArrayLength(times); i++) {
      html += formatTimeUnit(times[i]);
      if (i < getObjectOrArrayLength(times) - 2) {
        html += ', ';
      } else if(i == getObjectOrArrayLength(times) - 2) {
        html += ' and ';
      } else {
        html += '.';
      }
    }
    html += '</li>';
    return html;
  }

  function getBackgroundSlidesHtml(backgroundSlides) {
    var html = '<li>Background slides</li>';
    html += '<ul>';
    for(index in backgroundSlides) {
      html += '<li>' + backgroundSlides[index] + '</li>';
    }
    html += '</ul>';
    return html;
  }

  function getAudioSlidesSummaryHtml(time, audioSlidesResult) {
    var html = '';
    html += formatTimeUnit(time) + '.: ' + 
      (audioSlidesResult.count.landscape + audioSlidesResult.count.portrait) + ' Slides received, ' + 
      (audioSlidesResult.status == CHECK_STATUS_SUCCESS ? 'complete!' : 'imcompelete!');

    if (audioSlidesResult.status == CHECK_STATUS_FAIL) {
      html += '<ul>';
      for(var i in audioSlidesResult.error_msg) {
        html += '<li>' + audioSlidesResult.error_msg[i] + '</li>';
      }
      html += '</ul><br/>';
    }
    return html;
  }

  function getNoMatchAudioFilesHtml(noMatchAudioSlides) {
    var html = '<li>No match audio slides</li>';
    html += '<ul>';
    for(index in noMatchAudioSlides) {
      html += '<li>' + noMatchAudioSlides[index] + '</li>';
    }
    html += '</ul><br/>';
    return html;
  }

  function getWrongFilesHtml(wrongFileReasons){
    var html = '<li>Wrong file names</li>';
    html += '<ul>';
    for(index in wrongFileReasons) {
      html += '<li>' + wrongFileReasons[index] + '</li>';
    }
    html += '</ul><br/>';
    return html;
  }

  function getEndDescHtml(status) {
    if (status == CHECK_STATUS_SUCCESS) {
      return '<li>No consistency errors detected</li>';
    } else {
      return '<li>Lesson cannot be marked complete</li>' +
              '<li>Please correct errors and submit again</li>';
    }
  }

  function filterFileName(fileNames) {
    initAudioSlidesMap();
    var validFileNames = [];
    for (var i = 0; i < fileNames.length; i++) {
      validFileNameAndGroupByType(fileNames[i], validFileNames);
    }
    return validFileNames;
  }

  function getFileType(extension) {
    if (jq.inArray(extension.toLowerCase(), AUDIO_FILE_TYPE_ARRAY) != -1) {
        fileType = FILE_TYPE_AUDIO;
    } else if (jq.inArray(extension.toLowerCase(), IMAGE_FILE_TYPE_ARRAY) != -1) {
        fileType = FILE_TYPE_SLIDE;
    } else {
        fileType = FILE_TYPE_OTHER;
    }
    return fileType;
  }

  function validFileNameAndGroupByType(fileName, validFileNames) {
    splitResult = fileName.split('.');
    extension = splitResult.pop();
    group = splitResult;
    
    fileType = getFileType(extension);

    if (fileType == FILE_TYPE_OTHER) {
      dealWithCheckFileNameFail(fileName, CHECK_FILE_INVALID_EXTENSION_CODE);
      return;
    }

    checkCode = verifyNameByGroup(group, fileType)

    if (checkCode == CHECK_FILE_SUCCESS_CODE) {
      validFileNames.push(fileName);
    } else {
      dealWithCheckFileNameFail(fileName, checkCode);
    }
  }

  function dealWithCheckFileNameFail(fileName, checkCode) {
    audioSlidesMap.wrong_files.push(fileName);
    checkResult.summary.wrong_files.push(getCheckFileNameErrorMessage(fileName, checkCode));
    checkResult.status = CHECK_STATUS_FAIL;
  }

  function verifyNameByGroup(group, fileType) {
    if (group.length != 3 && group.length != 4) {
      return CHECK_FILE_INVALID_NAME_CODE;
    }
    if (group[0] != getLessonNumber()) {
      return CHECK_FILE_INVALID_LESSON_NUMBER_CODE;
    }
    return fileType == FILE_TYPE_AUDIO ? verifyFileAsAudio(group) : verifyFileAsSlide(group);
  }

  function verifyFileAsAudio(group) {
    if (group.length != 3) {
      return CHECK_FILE_INVALID_NAME_CODE;
    }
    var reg = /^[0-9]{1}$/;
    if (!reg.test(group[1])) {
        return CHECK_FILE_INVALID_NAME_CODE;
    }
    return CHECK_FILE_SUCCESS_CODE;
  }

  function verifyFileAsSlide(group) {
    var reg = /^(0000|[0-9]{1})$/;
    if (!reg.test(group[1])) {
        return CHECK_FILE_INVALID_NAME_CODE;
    }
    if (group.length == 3) {
      if (group[1] != '0000' || group[2] != 'bg') {
        return CHECK_FILE_INVALID_NAME_CODE;
      }
    } else {
      if (jq.inArray(group[3].toLowerCase(), ['tp', 'tl', 'sp', 'sl']) == -1) {
        return CHECK_FILE_INVALID_NAME_CODE;
      }
    }
    return CHECK_FILE_SUCCESS_CODE;
  }

  function getCheckFileNameErrorMessage(fileName, type) {
    if (type == CHECK_FILE_INVALID_EXTENSION_CODE) {
      message = ' is not a valid file extension';
    } else if (type == CHECK_FILE_INVALID_LESSON_NUMBER_CODE) {
      message = ' Lesson Number does not correspond with Lesson Entered';
    } else {
      message = ' is not a valid name';
    }
    return fileName + message;
  }

  function groupFiles(fileNames) {
    for (var i = 0; i < fileNames.length; i++) {
      fileName = fileNames[i];
      splitResult = fileName.split('.');
      extension = splitResult.pop();
      group = splitResult;

      if (group[1] == '0000' && group[2] == 'bg') {
        audioSlidesMap['backgroundSlides'].push(fileName);
        continue;
      }
      if (!audioSlidesMap.hasOwnProperty(group[1])) {
        audioSlidesMap[group[1]] = initAudioSlideData();
      }
      fileType = getFileType(extension);
      if (fileType == FILE_TYPE_AUDIO) {
        audioSlidesMap[group[1]]['audio'].push(fileName);
      } else {
        if (!audioSlidesMap[group[1]]['slides'].hasOwnProperty(group[2])) {
          audioSlidesMap[splitResult[1]]['slides'][group[2]] = initSlidesData();
        }
        audioSlidesMap[group[1]]['slides'][group[2]].push(fileName);
      }
    }
  }

  function initCheckResult() {
    return checkResult = { 
      status: CHECK_STATUS_SUCCESS, 
      summary: { 
        backgroundSlides: {},
        audioSlidesResult: {},
        no_match_audio_slides: [],
        wrong_files: []
      },
    };
  }

  function initAudioSlideResult() {
    return audioSlideResult = {
        status: CHECK_STATUS_SUCCESS,
        count: {
            landscape: 0,
            portrait: 0
        },
        error_msg:[]
    };
  }

  function initAudioSlidesMap() {
    return audioSlidesMap = {
      backgroundSlides:[],
      wrong_files:[]
    };;
  }

  function initAudioSlideData() {
    return audioSlideData = {
      audio:[],
      slides:{}
    };
  }

  function initSlidesData() {
    return slideData = [];
  }

  function getLessonNumber() {
    return document.fetchLessonForm.lessonNumber.value;
  }

</script>
</body>
</html>